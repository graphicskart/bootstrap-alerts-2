{"version":3,"sources":["components/common/CustomModal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClose","setState","show","handleShow","state","react_default","a","createElement","Modal","onHide","className","concat","type","size","centered","Body","Col","xs","title","description","icon","sm","Button","variant","onClick","buttonTitle","Component","App","openModal","modal","_this2","Container","class","CustomModal_CustomModal","ref","c","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAGqBA,cACnB,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC1BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAOfQ,YAAc,WACZP,EAAKQ,SAAS,CAAEC,MAAM,KATIT,EAY5BU,WAAa,WACXV,EAAKQ,SAAS,CAAEC,MAAM,KAVtBT,EAAKW,MAAQ,CACXF,MAAM,GAJkBT,wEAiB1B,OACEY,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEN,KAAMN,KAAKQ,MAAMF,KACjBO,OAAQb,KAAKI,YACbU,UAAS,GAAAC,OAAKf,KAAKL,MAAMqB,KAAhB,KAAAD,OAAwBf,KAAKL,MAAMqB,KAAnC,gBACTC,KAAK,KACLC,UAAQ,GAERT,EAAAC,EAAAC,cAACC,EAAA,EAAMO,KAAP,KACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKC,GAAI,IACPZ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,SAASd,KAAKL,MAAM2B,OAClCb,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKC,GAAI,GAAIP,UAAU,eACrBL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,eAEhBL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAkBd,KAAKL,MAAM4B,aAC1Cd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,QAAQd,KAAKL,MAAM6B,OAElCf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKK,GAAI,GAAIJ,GAAI,GAAIP,UAAU,sBAC7BL,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAAS5B,KAAKI,aAAlD,qBAGAK,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQC,QAAS3B,KAAKL,MAAMqB,KAAMY,QAAS5B,KAAKI,aAC7CJ,KAAKL,MAAMkC,uBAxCeC,aCyE1BC,cAtEb,SAAAA,EAAYpC,GAAO,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACjBlC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAML,KAURqC,UAAY,SAAChB,EAAMM,EAAOC,EAAaM,EAAaL,GAClD3B,EAAKQ,SAAS,CACZW,OACAM,QACAC,cACAM,cACAL,SAGF3B,EAAKoC,MAAM1B,cAjBXV,EAAKW,MAAQ,CACXQ,KAAM,GACNO,YAAa,GACbD,MAAO,GACPO,YAAa,GACbL,KAAM,IARS3B,wEAuBV,IAAAqC,EAAAlC,KACP,OACES,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAWrB,UAAU,OACnBL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKC,GAAI,IACPZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,QAAQ,kBACRC,QAAS,kBACPM,EAAKF,UACH,UACA,WACA,gEACA,gBACAvB,EAAAC,EAAAC,cAAA,KAAGyB,MAAM,wCARf,WADF,OAgBE3B,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,QAAQ,iBACRC,QAAS,kBACPM,EAAKF,UACH,SACA,SACA,oEACA,iBACAvB,EAAAC,EAAAC,cAAA,KAAGyB,MAAM,uCARf,WAeF3B,EAAAC,EAAAC,cAAC0B,EAAD,CACEC,IAAK,SAAAC,GAAC,OAAKL,EAAKD,MAAQM,GACxBvB,KAAMhB,KAAKQ,MAAMQ,KACjBO,YAAavB,KAAKQ,MAAMe,YACxBD,MAAOtB,KAAKQ,MAAMc,MAClBO,YAAa7B,KAAKQ,MAAMqB,YACxBL,KAAMxB,KAAKQ,MAAMgB,eAhETM,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.830fadc6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Modal, Button, Col } from \"react-bootstrap\";\n\nexport default class CustomModal extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      show: false\n    };\n  }\n\n  handleClose = () => {\n    this.setState({ show: false });\n  };\n\n  handleShow = () => {\n    this.setState({ show: true });\n  };\n\n  render() {\n    return (\n      <Modal\n        show={this.state.show}\n        onHide={this.handleClose}\n        className={`${this.props.type} ${this.props.type} text-center`}\n        size=\"md\"\n        centered\n      >\n        <Modal.Body>\n          <Col xs={12}>\n            <h4 className=\"title\">{this.props.title}</h4>\n            <Col xs={12} className=\"text-center\">\n              <hr className=\"separator\" />\n            </Col>\n            <p className=\"modal-contents\">{this.props.description}</p>\n            <p className=\"icon\">{this.props.icon}</p>\n          </Col>\n          <Col sm={12} xs={12} className=\"modal-footer-area \">\n            <Button variant=\"outline-secondary\" onClick={this.handleClose}>\n              Continue shopping\n            </Button>\n            <Button variant={this.props.type} onClick={this.handleClose}>\n              {this.props.buttonTitle}\n            </Button>\n          </Col>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button, Col, Container } from \"react-bootstrap\";\nimport { CustomModal } from \"./components\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      type: \"\",\n      description: \"\",\n      title: \"\",\n      buttonTitle: \"\",\n      icon: \"\"\n    };\n  }\n  openModal = (type, title, description, buttonTitle, icon) => {\n    this.setState({\n      type,\n      title,\n      description,\n      buttonTitle,\n      icon\n    });\n\n    this.modal.handleShow();\n  };\n\n  render() {\n    return (\n      <Container className=\"App\">\n        <Col xs={12}>\n          <Button\n            variant=\"outline-success\"\n            onClick={() =>\n              this.openModal(\n                \"success\",\n                \"Success!\",\n                \"We are delighted to inform you that we received your payment.\",\n                \"Print receipt\",\n                <i class=\"fas fa-check-circle text-success\" />\n              )\n            }\n          >\n            Success\n          </Button>\n          &nbsp;\n          <Button\n            variant=\"outline-danger\"\n            onClick={() =>\n              this.openModal(\n                \"danger\",\n                \"Error!\",\n                \"Unfortunately we have an issue with your payment, try again later\",\n                \"Try once again\",\n                <i class=\"fas fa-times-circle text-danger\" />\n              )\n            }\n          >\n            Danger\n          </Button>\n        </Col>\n        <CustomModal\n          ref={c => (this.modal = c)}\n          type={this.state.type}\n          description={this.state.description}\n          title={this.state.title}\n          buttonTitle={this.state.buttonTitle}\n          icon={this.state.icon}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}